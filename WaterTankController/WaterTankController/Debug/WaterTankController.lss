
WaterTankController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000518  000005ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000518  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800116  00800116  000005c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ac  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a74  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f2  00000000  00000000  0000255c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00002f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d5  00000000  00000000  000031c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000093f  00000000  00000000  00003799  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000040d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
  9e:	0c 94 8a 02 	jmp	0x514	; 0x514 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_pullup>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_pullup+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_pullup+0xa>
  d0:	92 2f       	mov	r25, r18
  d2:	90 95       	com	r25
  d4:	89 23       	and	r24, r25
  d6:	80 83       	st	Z, r24
  d8:	81 81       	ldd	r24, Z+1	; 0x01
  da:	28 2b       	or	r18, r24
  dc:	21 83       	std	Z+1, r18	; 0x01
  de:	08 95       	ret

000000e0 <GPIO_write_low>:
  e0:	fc 01       	movw	r30, r24
  e2:	90 81       	ld	r25, Z
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_write_low+0xe>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_write_low+0xa>
  f2:	20 95       	com	r18
  f4:	29 23       	and	r18, r25
  f6:	20 83       	st	Z, r18
  f8:	08 95       	ret

000000fa <GPIO_write_high>:
  fa:	fc 01       	movw	r30, r24
  fc:	40 81       	ld	r20, Z
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_write_high+0xe>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_write_high+0xa>
 10c:	24 2b       	or	r18, r20
 10e:	20 83       	st	Z, r18
 110:	08 95       	ret

00000112 <toggle_e>:
 112:	85 b1       	in	r24, 0x05	; 5
 114:	82 60       	ori	r24, 0x02	; 2
 116:	85 b9       	out	0x05, r24	; 5
 118:	85 e0       	ldi	r24, 0x05	; 5
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <toggle_e+0x8>
 11e:	00 00       	nop
 120:	85 b1       	in	r24, 0x05	; 5
 122:	8d 7f       	andi	r24, 0xFD	; 253
 124:	85 b9       	out	0x05, r24	; 5
 126:	08 95       	ret

00000128 <lcd_write>:
 128:	cf 93       	push	r28
 12a:	c8 2f       	mov	r28, r24
 12c:	66 23       	and	r22, r22
 12e:	21 f0       	breq	.+8      	; 0x138 <lcd_write+0x10>
 130:	85 b1       	in	r24, 0x05	; 5
 132:	81 60       	ori	r24, 0x01	; 1
 134:	85 b9       	out	0x05, r24	; 5
 136:	03 c0       	rjmp	.+6      	; 0x13e <lcd_write+0x16>
 138:	85 b1       	in	r24, 0x05	; 5
 13a:	8e 7f       	andi	r24, 0xFE	; 254
 13c:	85 b9       	out	0x05, r24	; 5
 13e:	8a b1       	in	r24, 0x0a	; 10
 140:	80 61       	ori	r24, 0x10	; 16
 142:	8a b9       	out	0x0a, r24	; 10
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	80 62       	ori	r24, 0x20	; 32
 148:	8a b9       	out	0x0a, r24	; 10
 14a:	8a b1       	in	r24, 0x0a	; 10
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	8a b9       	out	0x0a, r24	; 10
 150:	8a b1       	in	r24, 0x0a	; 10
 152:	80 68       	ori	r24, 0x80	; 128
 154:	8a b9       	out	0x0a, r24	; 10
 156:	8b b1       	in	r24, 0x0b	; 11
 158:	8f 77       	andi	r24, 0x7F	; 127
 15a:	8b b9       	out	0x0b, r24	; 11
 15c:	8b b1       	in	r24, 0x0b	; 11
 15e:	8f 7b       	andi	r24, 0xBF	; 191
 160:	8b b9       	out	0x0b, r24	; 11
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	8f 7d       	andi	r24, 0xDF	; 223
 166:	8b b9       	out	0x0b, r24	; 11
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	8f 7e       	andi	r24, 0xEF	; 239
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	cc 23       	and	r28, r28
 170:	1c f4       	brge	.+6      	; 0x178 <lcd_write+0x50>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 68       	ori	r24, 0x80	; 128
 176:	8b b9       	out	0x0b, r24	; 11
 178:	c6 ff       	sbrs	r28, 6
 17a:	03 c0       	rjmp	.+6      	; 0x182 <lcd_write+0x5a>
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	80 64       	ori	r24, 0x40	; 64
 180:	8b b9       	out	0x0b, r24	; 11
 182:	c5 ff       	sbrs	r28, 5
 184:	03 c0       	rjmp	.+6      	; 0x18c <lcd_write+0x64>
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	80 62       	ori	r24, 0x20	; 32
 18a:	8b b9       	out	0x0b, r24	; 11
 18c:	c4 ff       	sbrs	r28, 4
 18e:	03 c0       	rjmp	.+6      	; 0x196 <lcd_write+0x6e>
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	80 61       	ori	r24, 0x10	; 16
 194:	8b b9       	out	0x0b, r24	; 11
 196:	0e 94 89 00 	call	0x112	; 0x112 <toggle_e>
 19a:	8b b1       	in	r24, 0x0b	; 11
 19c:	8f 77       	andi	r24, 0x7F	; 127
 19e:	8b b9       	out	0x0b, r24	; 11
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	8f 7b       	andi	r24, 0xBF	; 191
 1a4:	8b b9       	out	0x0b, r24	; 11
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	8f 7d       	andi	r24, 0xDF	; 223
 1aa:	8b b9       	out	0x0b, r24	; 11
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	8f 7e       	andi	r24, 0xEF	; 239
 1b0:	8b b9       	out	0x0b, r24	; 11
 1b2:	c3 ff       	sbrs	r28, 3
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <lcd_write+0x94>
 1b6:	8b b1       	in	r24, 0x0b	; 11
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	8b b9       	out	0x0b, r24	; 11
 1bc:	c2 ff       	sbrs	r28, 2
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <lcd_write+0x9e>
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	80 64       	ori	r24, 0x40	; 64
 1c4:	8b b9       	out	0x0b, r24	; 11
 1c6:	c1 ff       	sbrs	r28, 1
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <lcd_write+0xa8>
 1ca:	8b b1       	in	r24, 0x0b	; 11
 1cc:	80 62       	ori	r24, 0x20	; 32
 1ce:	8b b9       	out	0x0b, r24	; 11
 1d0:	c0 ff       	sbrs	r28, 0
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <lcd_write+0xb2>
 1d4:	8b b1       	in	r24, 0x0b	; 11
 1d6:	80 61       	ori	r24, 0x10	; 16
 1d8:	8b b9       	out	0x0b, r24	; 11
 1da:	0e 94 89 00 	call	0x112	; 0x112 <toggle_e>
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	80 61       	ori	r24, 0x10	; 16
 1e2:	8b b9       	out	0x0b, r24	; 11
 1e4:	8b b1       	in	r24, 0x0b	; 11
 1e6:	80 62       	ori	r24, 0x20	; 32
 1e8:	8b b9       	out	0x0b, r24	; 11
 1ea:	8b b1       	in	r24, 0x0b	; 11
 1ec:	80 64       	ori	r24, 0x40	; 64
 1ee:	8b b9       	out	0x0b, r24	; 11
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	8b b9       	out	0x0b, r24	; 11
 1f6:	87 eb       	ldi	r24, 0xB7	; 183
 1f8:	9b e0       	ldi	r25, 0x0B	; 11
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_write+0xd2>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <lcd_write+0xd8>
 200:	00 00       	nop
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <lcd_command>:
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	0e 94 94 00 	call	0x128	; 0x128 <lcd_write>
 20c:	08 95       	ret

0000020e <lcd_gotoxy>:
 20e:	61 11       	cpse	r22, r1
 210:	04 c0       	rjmp	.+8      	; 0x21a <lcd_gotoxy+0xc>
 212:	80 58       	subi	r24, 0x80	; 128
 214:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
 218:	08 95       	ret
 21a:	80 54       	subi	r24, 0x40	; 64
 21c:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
 220:	08 95       	ret

00000222 <lcd_clrscr>:
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
 228:	08 95       	ret

0000022a <lcd_putc>:
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	0e 94 94 00 	call	0x128	; 0x128 <lcd_write>
 230:	08 95       	ret

00000232 <lcd_puts>:
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	fc 01       	movw	r30, r24
 238:	03 c0       	rjmp	.+6      	; 0x240 <lcd_puts+0xe>
 23a:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_putc>
 23e:	fe 01       	movw	r30, r28
 240:	ef 01       	movw	r28, r30
 242:	21 96       	adiw	r28, 0x01	; 1
 244:	80 81       	ld	r24, Z
 246:	81 11       	cpse	r24, r1
 248:	f8 cf       	rjmp	.-16     	; 0x23a <lcd_puts+0x8>
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <lcd_init>:
 250:	cf 93       	push	r28
 252:	c8 2f       	mov	r28, r24
 254:	84 b1       	in	r24, 0x04	; 4
 256:	81 60       	ori	r24, 0x01	; 1
 258:	84 b9       	out	0x04, r24	; 4
 25a:	8a b1       	in	r24, 0x0a	; 10
 25c:	80 62       	ori	r24, 0x20	; 32
 25e:	8a b9       	out	0x0a, r24	; 10
 260:	84 b1       	in	r24, 0x04	; 4
 262:	82 60       	ori	r24, 0x02	; 2
 264:	84 b9       	out	0x04, r24	; 4
 266:	8a b1       	in	r24, 0x0a	; 10
 268:	80 61       	ori	r24, 0x10	; 16
 26a:	8a b9       	out	0x0a, r24	; 10
 26c:	8a b1       	in	r24, 0x0a	; 10
 26e:	80 62       	ori	r24, 0x20	; 32
 270:	8a b9       	out	0x0a, r24	; 10
 272:	8a b1       	in	r24, 0x0a	; 10
 274:	80 64       	ori	r24, 0x40	; 64
 276:	8a b9       	out	0x0a, r24	; 10
 278:	8a b1       	in	r24, 0x0a	; 10
 27a:	80 68       	ori	r24, 0x80	; 128
 27c:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	99 ef       	ldi	r25, 0xF9	; 249
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <lcd_init+0x32>
 286:	00 c0       	rjmp	.+0      	; 0x288 <lcd_init+0x38>
 288:	00 00       	nop
 28a:	8b b1       	in	r24, 0x0b	; 11
 28c:	80 62       	ori	r24, 0x20	; 32
 28e:	8b b9       	out	0x0b, r24	; 11
 290:	8b b1       	in	r24, 0x0b	; 11
 292:	80 61       	ori	r24, 0x10	; 16
 294:	8b b9       	out	0x0b, r24	; 11
 296:	0e 94 89 00 	call	0x112	; 0x112 <toggle_e>
 29a:	8f e1       	ldi	r24, 0x1F	; 31
 29c:	9e e4       	ldi	r25, 0x4E	; 78
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <lcd_init+0x4e>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <lcd_init+0x54>
 2a4:	00 00       	nop
 2a6:	0e 94 89 00 	call	0x112	; 0x112 <toggle_e>
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <lcd_init+0x5e>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <lcd_init+0x64>
 2b4:	00 00       	nop
 2b6:	0e 94 89 00 	call	0x112	; 0x112 <toggle_e>
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <lcd_init+0x6e>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <lcd_init+0x74>
 2c4:	00 00       	nop
 2c6:	8b b1       	in	r24, 0x0b	; 11
 2c8:	8f 7e       	andi	r24, 0xEF	; 239
 2ca:	8b b9       	out	0x0b, r24	; 11
 2cc:	0e 94 89 00 	call	0x112	; 0x112 <toggle_e>
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <lcd_init+0x84>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <lcd_init+0x8a>
 2da:	00 00       	nop
 2dc:	88 e2       	ldi	r24, 0x28	; 40
 2de:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
 2e2:	88 e0       	ldi	r24, 0x08	; 8
 2e4:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
 2e8:	0e 94 11 01 	call	0x222	; 0x222 <lcd_clrscr>
 2ec:	86 e0       	ldi	r24, 0x06	; 6
 2ee:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
 2f2:	8c 2f       	mov	r24, r28
 2f4:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
	// Configure Trig PIN
	GPIO_config_output(&DDRD, trig);
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	8a e2       	ldi	r24, 0x2A	; 42
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTD, trig);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	8b e2       	ldi	r24, 0x2B	; 43
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	
	// Configure Echo PIN
	GPIO_config_input_pullup(&DDRD, echo);
 310:	62 e0       	ldi	r22, 0x02	; 2
 312:	8a e2       	ldi	r24, 0x2A	; 42
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
	
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 31a:	8c e0       	ldi	r24, 0x0C	; 12
 31c:	0e 94 28 01 	call	0x250	; 0x250 <lcd_init>

    // Put strings on LCD display
    lcd_gotoxy(1, 0);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
    lcd_puts("LEVEL:");
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
    
    lcd_gotoxy(12, 0);
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	8c e0       	ldi	r24, 0x0C	; 12
 334:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
    lcd_puts("cm");
 338:	87 e0       	ldi	r24, 0x07	; 7
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
    
	lcd_gotoxy(1, 1);
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
	lcd_puts("PUMP:");
 348:	8a e0       	ldi	r24, 0x0A	; 10
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
    
    
    // Any logical change on INT0 generates an interrupt request
    EICRA |= (1 << ISC00); 
 350:	e9 e6       	ldi	r30, 0x69	; 105
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	81 60       	ori	r24, 0x01	; 1
 358:	80 83       	st	Z, r24
    // Not strictly necessary, as register default values are already 0
    EICRA &= ~((1 << ISC11) | (1 << ISC10) | (1 << ISC01)); 
 35a:	80 81       	ld	r24, Z
 35c:	81 7f       	andi	r24, 0xF1	; 241
 35e:	80 83       	st	Z, r24
    // External Interrupt Request Enable
    EIMSK |= (1 << INT0); EIMSK &= ~(1 << INT1);
 360:	8d b3       	in	r24, 0x1d	; 29
 362:	81 60       	ori	r24, 0x01	; 1
 364:	8d bb       	out	0x1d, r24	; 29
 366:	8d b3       	in	r24, 0x1d	; 29
 368:	8d 7f       	andi	r24, 0xFD	; 253
 36a:	8d bb       	out	0x1d, r24	; 29
    
    // Overflow timer for trigger signal
    TIM1_overflow_33ms();
 36c:	e1 e8       	ldi	r30, 0x81	; 129
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	8a 7f       	andi	r24, 0xFA	; 250
 374:	80 83       	st	Z, r24
 376:	80 81       	ld	r24, Z
 378:	82 60       	ori	r24, 0x02	; 2
 37a:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 37c:	ef e6       	ldi	r30, 0x6F	; 111
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	81 60       	ori	r24, 0x01	; 1
 384:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 386:	78 94       	sei

    // Infinite loop
    while (1)
    {
        // 118 clocks of TIM0 with prescaler N=8 takes 58 us (~1cm for sound wave)
        if (TCNT0 >= 117)
 388:	86 b5       	in	r24, 0x26	; 38
 38a:	85 37       	cpi	r24, 0x75	; 117
 38c:	e8 f3       	brcs	.-6      	; 0x388 <main+0x8c>
        {
            ++distance;
 38e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <distance>
 392:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <distance+0x1>
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <distance+0x1>
 39c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <distance>
            TCNT0 = 0;
 3a0:	16 bc       	out	0x26, r1	; 38
 3a2:	f2 cf       	rjmp	.-28     	; 0x388 <main+0x8c>

000003a4 <__vector_1>:
    return 0;
}

/* Interrupt service routines ----------------------------------------*/
ISR(INT0_vect)
{
 3a4:	1f 92       	push	r1
 3a6:	0f 92       	push	r0
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
 3ae:	2f 93       	push	r18
 3b0:	3f 93       	push	r19
 3b2:	4f 93       	push	r20
 3b4:	5f 93       	push	r21
 3b6:	6f 93       	push	r22
 3b8:	7f 93       	push	r23
 3ba:	8f 93       	push	r24
 3bc:	9f 93       	push	r25
 3be:	af 93       	push	r26
 3c0:	bf 93       	push	r27
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
    // Strings for converting numbers
    static char lcd_str[3];
    // Change of state counter
    static uint8_t i = 0;
    
    if(i)
 3c6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <i.2096>
 3ca:	88 23       	and	r24, r24
 3cc:	01 f1       	breq	.+64     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
    {
        // Stop counting echo
        TIM0_stop();
 3ce:	85 b5       	in	r24, 0x25	; 37
 3d0:	88 7f       	andi	r24, 0xF8	; 248
 3d2:	85 bd       	out	0x25, r24	; 37
        // Reset timer
        TCNT0 = 0;
 3d4:	16 bc       	out	0x26, r1	; 38
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3d6:	4a e0       	ldi	r20, 0x0A	; 10
 3d8:	66 e1       	ldi	r22, 0x16	; 22
 3da:	71 e0       	ldi	r23, 0x01	; 1
 3dc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <distance>
 3e0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <distance+0x1>
 3e4:	0e 94 55 02 	call	0x4aa	; 0x4aa <__itoa_ncheck>
        
        // Calculate distance in centimeters and put in on LCD
        itoa(distance, lcd_str, 10);
        lcd_gotoxy(8, 0);
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	88 e0       	ldi	r24, 0x08	; 8
 3ec:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
        lcd_puts("    ");
 3f0:	80 e1       	ldi	r24, 0x10	; 16
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
        lcd_gotoxy(8, 0);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	88 e0       	ldi	r24, 0x08	; 8
 3fc:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
        lcd_puts(lcd_str);
 400:	86 e1       	ldi	r24, 0x16	; 22
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
        
        i = 0;
 408:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <i.2096>
 40c:	0d c0       	rjmp	.+26     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
    }
    else
    {
        // Clear previous calculated distance before next measurement
        distance = 0;
 40e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <distance+0x1>
 412:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <distance>
        
        // Start counting echo using 8-bit counter with prescaler N=8
        TIM0_overflow_128us();     
 416:	85 b5       	in	r24, 0x25	; 37
 418:	8a 7f       	andi	r24, 0xFA	; 250
 41a:	85 bd       	out	0x25, r24	; 37
 41c:	85 b5       	in	r24, 0x25	; 37
 41e:	82 60       	ori	r24, 0x02	; 2
 420:	85 bd       	out	0x25, r24	; 37
        
        i = 1;
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <i.2096>
    }
}
 428:	ff 91       	pop	r31
 42a:	ef 91       	pop	r30
 42c:	bf 91       	pop	r27
 42e:	af 91       	pop	r26
 430:	9f 91       	pop	r25
 432:	8f 91       	pop	r24
 434:	7f 91       	pop	r23
 436:	6f 91       	pop	r22
 438:	5f 91       	pop	r21
 43a:	4f 91       	pop	r20
 43c:	3f 91       	pop	r19
 43e:	2f 91       	pop	r18
 440:	0f 90       	pop	r0
 442:	0f be       	out	0x3f, r0	; 63
 444:	0f 90       	pop	r0
 446:	1f 90       	pop	r1
 448:	18 95       	reti

0000044a <__vector_13>:

ISR(TIMER1_OVF_vect)
{
 44a:	1f 92       	push	r1
 44c:	0f 92       	push	r0
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	0f 92       	push	r0
 452:	11 24       	eor	r1, r1
 454:	2f 93       	push	r18
 456:	3f 93       	push	r19
 458:	4f 93       	push	r20
 45a:	5f 93       	push	r21
 45c:	6f 93       	push	r22
 45e:	7f 93       	push	r23
 460:	8f 93       	push	r24
 462:	9f 93       	push	r25
 464:	af 93       	push	r26
 466:	bf 93       	push	r27
 468:	ef 93       	push	r30
 46a:	ff 93       	push	r31
    // Trigger the ultrasonic sensor
    GPIO_write_high(&PORTD, trig);
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	8b e2       	ldi	r24, 0x2B	; 43
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 476:	85 e3       	ldi	r24, 0x35	; 53
 478:	8a 95       	dec	r24
 47a:	f1 f7       	brne	.-4      	; 0x478 <__vector_13+0x2e>
 47c:	00 00       	nop
    _delay_us(10);
    GPIO_write_low(&PORTD, trig);
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	8b e2       	ldi	r24, 0x2B	; 43
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
}
 488:	ff 91       	pop	r31
 48a:	ef 91       	pop	r30
 48c:	bf 91       	pop	r27
 48e:	af 91       	pop	r26
 490:	9f 91       	pop	r25
 492:	8f 91       	pop	r24
 494:	7f 91       	pop	r23
 496:	6f 91       	pop	r22
 498:	5f 91       	pop	r21
 49a:	4f 91       	pop	r20
 49c:	3f 91       	pop	r19
 49e:	2f 91       	pop	r18
 4a0:	0f 90       	pop	r0
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	0f 90       	pop	r0
 4a6:	1f 90       	pop	r1
 4a8:	18 95       	reti

000004aa <__itoa_ncheck>:
 4aa:	bb 27       	eor	r27, r27
 4ac:	4a 30       	cpi	r20, 0x0A	; 10
 4ae:	31 f4       	brne	.+12     	; 0x4bc <__itoa_ncheck+0x12>
 4b0:	99 23       	and	r25, r25
 4b2:	22 f4       	brpl	.+8      	; 0x4bc <__itoa_ncheck+0x12>
 4b4:	bd e2       	ldi	r27, 0x2D	; 45
 4b6:	90 95       	com	r25
 4b8:	81 95       	neg	r24
 4ba:	9f 4f       	sbci	r25, 0xFF	; 255
 4bc:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__utoa_common>

000004c0 <__utoa_ncheck>:
 4c0:	bb 27       	eor	r27, r27

000004c2 <__utoa_common>:
 4c2:	fb 01       	movw	r30, r22
 4c4:	55 27       	eor	r21, r21
 4c6:	aa 27       	eor	r26, r26
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	aa 1f       	adc	r26, r26
 4ce:	a4 17       	cp	r26, r20
 4d0:	10 f0       	brcs	.+4      	; 0x4d6 <__utoa_common+0x14>
 4d2:	a4 1b       	sub	r26, r20
 4d4:	83 95       	inc	r24
 4d6:	50 51       	subi	r21, 0x10	; 16
 4d8:	b9 f7       	brne	.-18     	; 0x4c8 <__utoa_common+0x6>
 4da:	a0 5d       	subi	r26, 0xD0	; 208
 4dc:	aa 33       	cpi	r26, 0x3A	; 58
 4de:	08 f0       	brcs	.+2      	; 0x4e2 <__utoa_common+0x20>
 4e0:	a9 5d       	subi	r26, 0xD9	; 217
 4e2:	a1 93       	st	Z+, r26
 4e4:	00 97       	sbiw	r24, 0x00	; 0
 4e6:	79 f7       	brne	.-34     	; 0x4c6 <__utoa_common+0x4>
 4e8:	b1 11       	cpse	r27, r1
 4ea:	b1 93       	st	Z+, r27
 4ec:	11 92       	st	Z+, r1
 4ee:	cb 01       	movw	r24, r22
 4f0:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <strrev>

000004f4 <strrev>:
 4f4:	dc 01       	movw	r26, r24
 4f6:	fc 01       	movw	r30, r24
 4f8:	67 2f       	mov	r22, r23
 4fa:	71 91       	ld	r23, Z+
 4fc:	77 23       	and	r23, r23
 4fe:	e1 f7       	brne	.-8      	; 0x4f8 <strrev+0x4>
 500:	32 97       	sbiw	r30, 0x02	; 2
 502:	04 c0       	rjmp	.+8      	; 0x50c <strrev+0x18>
 504:	7c 91       	ld	r23, X
 506:	6d 93       	st	X+, r22
 508:	70 83       	st	Z, r23
 50a:	62 91       	ld	r22, -Z
 50c:	ae 17       	cp	r26, r30
 50e:	bf 07       	cpc	r27, r31
 510:	c8 f3       	brcs	.-14     	; 0x504 <strrev+0x10>
 512:	08 95       	ret

00000514 <_exit>:
 514:	f8 94       	cli

00000516 <__stop_program>:
 516:	ff cf       	rjmp	.-2      	; 0x516 <__stop_program>
