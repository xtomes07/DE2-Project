
WaterTankController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000380  00000414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000380  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010e  0080010e  00000422  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001169  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000973  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f1  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002964  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000570  00000000  00000000  00002b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000775  00000000  00000000  000030b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000382d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <main>
  9e:	0c 94 be 01 	jmp	0x37c	; 0x37c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_nopull(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                             // Change pointer to Data Register
    *reg_name = *reg_name & ~(1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_pullup>:
 * Input:    reg_name - Address of Data Direction Register, such as &DDRB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_pullup+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_pullup+0xa>
  d0:	92 2f       	mov	r25, r18
  d2:	90 95       	com	r25
  d4:	89 23       	and	r24, r25
  d6:	80 83       	st	Z, r24
    reg_name++;                             // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  d8:	81 81       	ldd	r24, Z+1	; 0x01
  da:	28 2b       	or	r18, r24
  dc:	21 83       	std	Z+1, r18	; 0x01
  de:	08 95       	ret

000000e0 <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  e0:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  e2:	90 81       	ld	r25, Z
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_write_low+0xe>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_write_low+0xa>
  f2:	20 95       	com	r18
  f4:	29 23       	and	r18, r25
  f6:	20 83       	st	Z, r18
  f8:	08 95       	ret

000000fa <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	85 b9       	out	0x05, r24	; 5
 100:	85 e0       	ldi	r24, 0x05	; 5
 102:	8a 95       	dec	r24
 104:	f1 f7       	brne	.-4      	; 0x102 <toggle_e+0x8>
 106:	00 00       	nop
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	8d 7f       	andi	r24, 0xFD	; 253
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	08 95       	ret

00000110 <lcd_write>:
 110:	cf 93       	push	r28
 112:	c8 2f       	mov	r28, r24
 114:	66 23       	and	r22, r22
 116:	21 f0       	breq	.+8      	; 0x120 <lcd_write+0x10>
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	85 b9       	out	0x05, r24	; 5
 11e:	03 c0       	rjmp	.+6      	; 0x126 <lcd_write+0x16>
 120:	85 b1       	in	r24, 0x05	; 5
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	85 b9       	out	0x05, r24	; 5
 126:	8a b1       	in	r24, 0x0a	; 10
 128:	80 61       	ori	r24, 0x10	; 16
 12a:	8a b9       	out	0x0a, r24	; 10
 12c:	8a b1       	in	r24, 0x0a	; 10
 12e:	80 62       	ori	r24, 0x20	; 32
 130:	8a b9       	out	0x0a, r24	; 10
 132:	8a b1       	in	r24, 0x0a	; 10
 134:	80 64       	ori	r24, 0x40	; 64
 136:	8a b9       	out	0x0a, r24	; 10
 138:	8a b1       	in	r24, 0x0a	; 10
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	8a b9       	out	0x0a, r24	; 10
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	8f 77       	andi	r24, 0x7F	; 127
 142:	8b b9       	out	0x0b, r24	; 11
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	8f 7b       	andi	r24, 0xBF	; 191
 148:	8b b9       	out	0x0b, r24	; 11
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	8f 7d       	andi	r24, 0xDF	; 223
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	8f 7e       	andi	r24, 0xEF	; 239
 154:	8b b9       	out	0x0b, r24	; 11
 156:	cc 23       	and	r28, r28
 158:	1c f4       	brge	.+6      	; 0x160 <lcd_write+0x50>
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	8b b9       	out	0x0b, r24	; 11
 160:	c6 ff       	sbrs	r28, 6
 162:	03 c0       	rjmp	.+6      	; 0x16a <lcd_write+0x5a>
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	80 64       	ori	r24, 0x40	; 64
 168:	8b b9       	out	0x0b, r24	; 11
 16a:	c5 ff       	sbrs	r28, 5
 16c:	03 c0       	rjmp	.+6      	; 0x174 <lcd_write+0x64>
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	80 62       	ori	r24, 0x20	; 32
 172:	8b b9       	out	0x0b, r24	; 11
 174:	c4 ff       	sbrs	r28, 4
 176:	03 c0       	rjmp	.+6      	; 0x17e <lcd_write+0x6e>
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	80 61       	ori	r24, 0x10	; 16
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	8f 77       	andi	r24, 0x7F	; 127
 186:	8b b9       	out	0x0b, r24	; 11
 188:	8b b1       	in	r24, 0x0b	; 11
 18a:	8f 7b       	andi	r24, 0xBF	; 191
 18c:	8b b9       	out	0x0b, r24	; 11
 18e:	8b b1       	in	r24, 0x0b	; 11
 190:	8f 7d       	andi	r24, 0xDF	; 223
 192:	8b b9       	out	0x0b, r24	; 11
 194:	8b b1       	in	r24, 0x0b	; 11
 196:	8f 7e       	andi	r24, 0xEF	; 239
 198:	8b b9       	out	0x0b, r24	; 11
 19a:	c3 ff       	sbrs	r28, 3
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <lcd_write+0x94>
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	8b b9       	out	0x0b, r24	; 11
 1a4:	c2 ff       	sbrs	r28, 2
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <lcd_write+0x9e>
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	80 64       	ori	r24, 0x40	; 64
 1ac:	8b b9       	out	0x0b, r24	; 11
 1ae:	c1 ff       	sbrs	r28, 1
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <lcd_write+0xa8>
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	80 62       	ori	r24, 0x20	; 32
 1b6:	8b b9       	out	0x0b, r24	; 11
 1b8:	c0 ff       	sbrs	r28, 0
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <lcd_write+0xb2>
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	8b b9       	out	0x0b, r24	; 11
 1c2:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	80 61       	ori	r24, 0x10	; 16
 1ca:	8b b9       	out	0x0b, r24	; 11
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	80 62       	ori	r24, 0x20	; 32
 1d0:	8b b9       	out	0x0b, r24	; 11
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	80 64       	ori	r24, 0x40	; 64
 1d6:	8b b9       	out	0x0b, r24	; 11
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	80 68       	ori	r24, 0x80	; 128
 1dc:	8b b9       	out	0x0b, r24	; 11
 1de:	87 eb       	ldi	r24, 0xB7	; 183
 1e0:	9b e0       	ldi	r25, 0x0B	; 11
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_write+0xd2>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_write+0xd8>
 1e8:	00 00       	nop
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <lcd_command>:
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	0e 94 88 00 	call	0x110	; 0x110 <lcd_write>
 1f4:	08 95       	ret

000001f6 <lcd_gotoxy>:
 1f6:	61 11       	cpse	r22, r1
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <lcd_gotoxy+0xc>
 1fa:	80 58       	subi	r24, 0x80	; 128
 1fc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_command>
 200:	08 95       	ret
 202:	80 54       	subi	r24, 0x40	; 64
 204:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_command>
 208:	08 95       	ret

0000020a <lcd_clrscr>:
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_command>
 210:	08 95       	ret

00000212 <lcd_putc>:
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	0e 94 88 00 	call	0x110	; 0x110 <lcd_write>
 218:	08 95       	ret

0000021a <lcd_puts>:
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	fc 01       	movw	r30, r24
 220:	03 c0       	rjmp	.+6      	; 0x228 <lcd_puts+0xe>
 222:	0e 94 09 01 	call	0x212	; 0x212 <lcd_putc>
 226:	fe 01       	movw	r30, r28
 228:	ef 01       	movw	r28, r30
 22a:	21 96       	adiw	r28, 0x01	; 1
 22c:	80 81       	ld	r24, Z
 22e:	81 11       	cpse	r24, r1
 230:	f8 cf       	rjmp	.-16     	; 0x222 <lcd_puts+0x8>
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 238:	cf 93       	push	r28
 23a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 23c:	84 b1       	in	r24, 0x04	; 4
 23e:	81 60       	ori	r24, 0x01	; 1
 240:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 242:	8a b1       	in	r24, 0x0a	; 10
 244:	80 62       	ori	r24, 0x20	; 32
 246:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 248:	84 b1       	in	r24, 0x04	; 4
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 24e:	8a b1       	in	r24, 0x0a	; 10
 250:	80 61       	ori	r24, 0x10	; 16
 252:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 254:	8a b1       	in	r24, 0x0a	; 10
 256:	80 62       	ori	r24, 0x20	; 32
 258:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 25a:	8a b1       	in	r24, 0x0a	; 10
 25c:	80 64       	ori	r24, 0x40	; 64
 25e:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 260:	8a b1       	in	r24, 0x0a	; 10
 262:	80 68       	ori	r24, 0x80	; 128
 264:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	99 ef       	ldi	r25, 0xF9	; 249
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_init+0x32>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <lcd_init+0x38>
 270:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 272:	8b b1       	in	r24, 0x0b	; 11
 274:	80 62       	ori	r24, 0x20	; 32
 276:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 278:	8b b1       	in	r24, 0x0b	; 11
 27a:	80 61       	ori	r24, 0x10	; 16
 27c:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 27e:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>
 282:	8f e1       	ldi	r24, 0x1F	; 31
 284:	9e e4       	ldi	r25, 0x4E	; 78
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <lcd_init+0x4e>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <lcd_init+0x54>
 28c:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 28e:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <lcd_init+0x5e>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <lcd_init+0x64>
 29c:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 29e:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <lcd_init+0x6e>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <lcd_init+0x74>
 2ac:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 2ae:	8b b1       	in	r24, 0x0b	; 11
 2b0:	8f 7e       	andi	r24, 0xEF	; 239
 2b2:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2b4:	0e 94 7d 00 	call	0xfa	; 0xfa <toggle_e>
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd_init+0x84>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd_init+0x8a>
 2c2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 2c4:	88 e2       	ldi	r24, 0x28	; 40
 2c6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 2ca:	88 e0       	ldi	r24, 0x08	; 8
 2cc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_command>
    lcd_clrscr();                  /* display clear                */
 2d0:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 2d4:	86 e0       	ldi	r24, 0x06	; 6
 2d6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 2da:	8c 2f       	mov	r24, r28
 2dc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_command>
}/* lcd_init */
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
	//Configure Trig PIN
	GPIO_config_output(&DDRD, trig);
 2e4:	63 e0       	ldi	r22, 0x03	; 3
 2e6:	8a e2       	ldi	r24, 0x2A	; 42
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTD, trig);
 2ee:	63 e0       	ldi	r22, 0x03	; 3
 2f0:	8b e2       	ldi	r24, 0x2B	; 43
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	
	//Configure Echo PIN
	GPIO_config_input_pullup(&DDRD, echo);
 2f8:	62 e0       	ldi	r22, 0x02	; 2
 2fa:	8a e2       	ldi	r24, 0x2A	; 42
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
	
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 302:	8c e0       	ldi	r24, 0x0C	; 12
 304:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_init>
	
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 308:	80 e4       	ldi	r24, 0x40	; 64
 30a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_command>

	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 30e:	80 e8       	ldi	r24, 0x80	; 128
 310:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_command>

    // Put string(s) at LCD display
    lcd_gotoxy(0, 0);
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_gotoxy>
    lcd_puts("LEVEL:");
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_puts>
	
	lcd_gotoxy(0, 1);
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_gotoxy>
	lcd_puts("PUMP:");
 32c:	87 e0       	ldi	r24, 0x07	; 7
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_puts>
	

    // Configure 8-bit Timer/Counter2 for Stopwatch
	TIM2_overflow_16384us();
 334:	85 b5       	in	r24, 0x25	; 37
 336:	8d 7f       	andi	r24, 0xFD	; 253
 338:	85 bd       	out	0x25, r24	; 37
 33a:	e1 eb       	ldi	r30, 0xB1	; 177
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	85 60       	ori	r24, 0x05	; 5
 342:	80 83       	st	Z, r24
    // Set the overflow prescaler to 16 ms and enable interrupt
	TIM2_overflow_interrupt_enable();
 344:	e0 e7       	ldi	r30, 0x70	; 112
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	81 60       	ori	r24, 0x01	; 1
 34c:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 34e:	78 94       	sei
 350:	ff cf       	rjmp	.-2      	; 0x350 <main+0x6c>

00000352 <__vector_9>:
 * Function: Timer/Counter2 overflow interrupt
 * Purpose:  Update the stopwatch on LCD display every sixth overflow,
 *           ie approximately every 100 ms (6 x 16 ms = 100 ms).
 **********************************************************************/
ISR(TIMER2_OVF_vect)
{
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	8f 93       	push	r24
    static uint8_t number_of_overflows = 0;

    number_of_overflows++;
 35e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 362:	8f 5f       	subi	r24, 0xFF	; 255
 364:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
    if (number_of_overflows >= 6)
 368:	86 30       	cpi	r24, 0x06	; 6
 36a:	10 f0       	brcs	.+4      	; 0x370 <__vector_9+0x1e>
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 36c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>

        // WRITE YOUR CODE HERE
		
    }
    // Else do nothing and exit the ISR
}
 370:	8f 91       	pop	r24
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <_exit>:
 37c:	f8 94       	cli

0000037e <__stop_program>:
 37e:	ff cf       	rjmp	.-2      	; 0x37e <__stop_program>
